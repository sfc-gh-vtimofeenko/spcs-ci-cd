daemon off;
user root;
error_log /dev/stdout info;
env TZ;
pid /dev/null;


# These two are needed for /snow location later
env SNOWFLAKE_HOST;
env SNOWFLAKE_ACCOUNT;

events {}

http {
    access_log /dev/stdout;
    server {
        listen 8001; # same port should be specified in the service spec
        location / {
            add_header Content-Type text/plain;
            # If custom header is present -- present customized greeting
            # SPCS injects sf-Context-Current-User
            # https://docs.snowflake.com/en/developer-guide/snowpark-container-services/working-with-services#user-specific-headers-in-ingress-requests
            if ($http_sf_context_current_user) {
                return 200 'Hello $http_sf_context_current_user';
            }
            # Else
            return 200 'Hello world';
        }

        # Simple echo server that implements the data format:
        # https://docs.snowflake.com/en/sql-reference/external-functions-data-format
        location /echo {
            limit_except POST { deny all; }
            add_header Content-Type application/json;

            # This needs openresty
            # https://github.com/openresty/lua-nginx-module
            content_by_lua_block {
                ngx.req.read_body()  -- explicitly read the req body
                    local data = ngx.req.get_body_data()

                    if data then
                        local input = require "cjson".decode(data)
                        ngx.say(require "cjson".encode{data = { {0, "Endpoint says: '" .. input.data[1][#input.data[1]] .. "'"} } })
                        return
                    end
                }
        }

        location /snow {
            # You probably really don't want to use this in production
            content_by_lua_block {
                local shell = require "resty.shell"

                    local stdin = "hello"
                    local timeout = 1000  -- ms
                    local max_size = 4096  -- byte

                    local ok, stdout, stderr, reason, status =
                        shell.run([[ echo "[connections.default]" | /bin/snow --config-file /dev/stdin sql --query "SELECT current_account_name()" --host "$SNOWFLAKE_HOST" --authenticator "OAUTH" --account "$SNOWFLAKE_ACCOUNT" --token-file-path /snowflake/session/token ]])
                    if not ok then
                        ngx.say("Not OK:")
                        ngx.say(stderr)
                    end

                    ngx.say(stdout)
                }
        }
    }
}
