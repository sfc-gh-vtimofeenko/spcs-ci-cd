---
name: "[Pipeline] Deploy and test service in SPCS"

on:
  workflow_call:
  workflow_dispatch:

jobs:
  deploy-to-spcs:
    runs-on: ubuntu-latest
    env:
      # Required authentication for snowflake-cli
      SNOWFLAKE_AUTHENTICATOR: SNOWFLAKE_JWT
      SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
      SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
      SNOWFLAKE_PRIVATE_KEY_PATH: /home/runner/work/key.p8
      REGISTRY_URL: ${{ secrets.REGISTRY_URL }}
      # Image tag
      IMAGE_TAG: "spcs-ci-cd:latest"

      # Test service settings
      TEST_SERVICE_NAME: CI_CD_TEST_SERVICE
      TEST_COMPUTE_POOL: CI_CD_TEST
      TEST_SERVICE_DB: SPCS
      TEST_SERVICE_SCHEMA: CI
      TEST_SERVICE_WH: ADHOC
      ROLE_WITH_ACCESS_TO_ENDPOINT: SPCS_CI_CD_RL

    steps:
      - name: Mask parts of the variables in GH logs
        run: |
          IFS='/' read -ra URL_PARTS <<< "${{ secrets.REGISTRY_URL }}"
          for i in "${URL_PARTS[@]}"; do
             echo "::add-mask::$i"
          done

          IFS='-' read -ra ACCOUNT_PARTS <<< "${{ secrets.SNOWFLAKE_ACCOUNT }}"
          for i in "${ACCOUNT_PARTS[@]}"; do
             echo "::add-mask::$i"
             # Mask uppercase version
             echo "::add-mask::${i^^}"
             # Mask lowercase version
             echo "::add-mask::${i,,}"
          done

      - uses: actions/checkout@v4

      - uses: DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: |-
              experimental-features = pipe-operators nix-command flakes

      # Set up cache to cache build-related things
      - uses: DeterminateSystems/magic-nix-cache-action@main

      # Download artifact from the build step
      - uses: actions/download-artifact@v4

      - name: Setup snowflake-cli authentication and config
        run: |
          cat <<EOF > ${{ env.SNOWFLAKE_PRIVATE_KEY_PATH }}
          ${{ secrets.SNOWFLAKE_PRIVATE_KEY }}
          EOF

          # This is done so that snowflake-cli is able to find the config.toml embedded in the repo
          export SNOWFLAKE_HOME=$(pwd)
          # Set the SNOWFLAKE_HOME variable for use by later steps
          echo "SNOWFLAKE_HOME=$(pwd)" >> $GITHUB_ENV
          # snowflake-cli checks the permissions on the confg file and complains if it's not 0600. Git does store permissions to this degree.
          chmod 0600 $SNOWFLAKE_HOME/config.toml

      - name: Add snowflake-cli
        run: |
          nix profile install .#snowflake-cli

      # Default version of skopeo provided in the runners is a bit old
      # This step installs a more up to date version of skopeo
      - name: Add skopeo
        run: |
          nix profile install .#skopeo

      # This step uses skopeo to push the docker archive into Snowflake.
      # snowflake-cli is used to generate the authentication using keypair
      - name: Push image to Snowflake
        run: utils/skopeo-push-to-snowflake-registry

      # This step starts the test compute pool where the test service will be running.
      - name: Start test compute pool
        run: utils/start-test-compute-pool-wait-until-up

      - name: Create test service
        run: utils/create-test-service-wait-until-up

      - name: Run tests
        run: utils/run-tests-against-spcs

      - name: Tear down test service
        # Run this if one is true:
        # 1. All steps above succeeded
        # 2. Job was cancelled
        #
        # Potential tweak: clean up if create step failed
        if: ${{ success() || cancelled() }}
        run: utils/tear-down-service
