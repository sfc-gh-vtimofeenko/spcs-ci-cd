---
name: Deploy and test service in SPCS

on:
  workflow_call:

jobs:
  deploy-to-spcs:
    runs-on: ubuntu-latest
    env:
      # Required authentication for snowflake-cli
      SNOWFLAKE_AUTHENTICATOR: SNOWFLAKE_JWT
      SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
      SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
      SNOWFLAKE_PRIVATE_KEY_PATH: /home/runner/work/key.p8
      # Image tag
      IMAGE_TAG: spcs-ci-cd

      # Test service settings
      TEST_SERVICE_NAME: CI_CD_TEST_SERVICE
      TEST_COMPUTE_POOL: CI_CD_TEST
      TEST_SERVICE_DB: SPCS
      TEST_SERVICE_SCHEMA: CI
      TEST_SERVICE_WH: ADHOC
      ROLE_WITH_ACCESS_TO_ENDPOINT: SPCS_CI_CD_RL

    steps:
      - name: Mask parts of the variables in GH logs
        run: |
          IFS='/' read -ra URL_PARTS <<< "${{ secrets.REGISTRY_URL }}"
          for i in "${URL_PARTS[@]}"; do
             echo "::add-mask::$i"
          done

          IFS='-' read -ra ACCOUNT_PARTS <<< "${{ secrets.SNOWFLAKE_ACCOUNT }}"
          for i in "${ACCOUNT_PARTS[@]}"; do
             echo "::add-mask::$i"
             # Mask uppercase version
             echo "::add-mask::${i^^}"
             # Mask lowercase version
             echo "::add-mask::${i,,}"
          done

      - uses: actions/checkout@v4

      - uses: DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: |-
              experimental-features = pipe-operators nix-command flakes

      # Set up cache to cache build-related things
      - uses: DeterminateSystems/magic-nix-cache-action@main

      # Download artifact from the build step
      - uses: actions/download-artifact@v4

      - name: Setup authentication
        run: |
          cat <<EOF > ${{ env.SNOWFLAKE_PRIVATE_KEY_PATH }}
          ${{ secrets.SNOWFLAKE_PRIVATE_KEY }}
          EOF

          # This is done so that snowflake-cli is able to find the config.toml embedded in the repo
          export SNOWFLAKE_HOME=$(pwd)
          # Set the SNOWFLAKE_HOME variable for use by later steps
          echo "SNOWFLAKE_HOME=$(pwd)" >> $GITHUB_ENV
          # snowflake-cli checks the permissions on the confg file and complains if it's not 0600. Git does store permissions to this degree.
          chmod 0600 $SNOWFLAKE_HOME/config.toml

      - name: Add snowflake-cli
        run: |
          nix profile install .#snowflake-cli

      - name: Push image to Snowflake
        run: |
          SKOPEO_CMD="nix run .#skopeo --"

          snow spcs image-registry token --format=JSON | $SKOPEO_CMD login "${{ secrets.REGISTRY_URL }}" --username 0sessiontoken --password-stdin

          TAG="${{ secrets.REGISTRY_URL }}/${{ env.IMAGE_TAG }}:latest"
          $SKOPEO_CMD copy \
              --additional-tag "$TAG" \
              --insecure-policy `#otherwise fails loading policy.json `\
              docker-archive:artifact/out \
              docker://"$TAG"

      - name: Start test compute pool
        run: |
          nix develop .#default --command "ci-snowcli-start-pool-wait-until-started"


      - name: Create test service
        run: |
          nix develop .#default --command "ci-snowcli-create-test-service"

      - name: Run tests
        run: |

          # jwt parsing needs file with 'pem' extension
          export SECRET_PATH="/home/runner/work/key.pem"
          cp ${{ env.SNOWFLAKE_PRIVATE_KEY_PATH }} $SECRET_PATH

          nix develop .#default --command "run-tests-against-spcs"

      - name: Tear down test service
        # TODO: always run this but with a comment
        run: |
          exit 1
