#!/usr/bin/env bash
#
# Starts a container pool and block until it's in a running state or a timeout
# is reached.
#
# Needs:
# - Binaries:
#   - snowflake-cli (snow)
#   - jq :: to parse and operate on json output
#   - timeout :: usually accessible from coreutils if not already present
#
# - Variables:
#   - TEST_COMPUTE_POOL :: name of the compute pool to start.
#
#     The CI user has to be able to read the pool state and start it. This
#     translates to the following privileges in Snowflake:
#     - MONITOR
#     - OPERATE
#

POOL_START_TIMEOUT="10m" # GNU timeout-compatible string to wait

GET_POOL_STATE_CMD=( snow spcs compute-pool describe "${TEST_COMPUTE_POOL}" --format JSON)

POOL_INITIAL_STATE="$("${GET_POOL_STATE_CMD[@]}" | jq --raw-output '.[].state')"

if [ "$POOL_INITIAL_STATE" = "SUSPENDED" ]; then
  echo "Starting the compute pool"
  snow spcs compute-pool resume "${TEST_COMPUTE_POOL}"
fi

DESIRED_STATES=("ACTIVE" "IDLE")


# Runs a command that checks if the pool is in one of the needed states. Times out.
timeout "$POOL_START_TIMEOUT" bash -c "
until [[ \"${DESIRED_STATES[*]}\" =~ \$POOL_STATE ]]; do
    echo \"Polling compute pool state\"
    export POOL_STATE=\$(${GET_POOL_STATE_CMD[*]} | jq --raw-output '.[].state')
    echo \"Pool $TEST_COMPUTE_POOL is \$POOL_STATE\"
    sleep 1
done
echo \"Done waiting. Compute pool is now \$POOL_STATE\"
"
